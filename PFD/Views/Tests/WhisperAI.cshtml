@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = null;
}
<button id="startRecording">Start Recording</button>
<button id="stopRecording" disabled>Stop Recording</button>
<div id="output"></div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const startRecordingButton = document.getElementById('startRecording');
        const stopRecordingButton = document.getElementById('stopRecording');
        const outputDiv = document.getElementById('output');
        let mediaRecorder;
        let audioChunks = [];

        startRecordingButton.addEventListener('click', startRecording);
        stopRecordingButton.addEventListener('click', stopRecording);

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

                mediaRecorder = new MediaRecorder(stream);

                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        audioChunks.push(event.data);
                    }
                };

                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    audioChunks = [];
                    processAudioBlob(audioBlob);
                };

                mediaRecorder.start();
                startRecordingButton.disabled = true;
                stopRecordingButton.disabled = false;

                outputDiv.innerHTML = 'Recording...';
            } catch (error) {
                console.error('Error accessing microphone:', error);
            }
        }

        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                startRecordingButton.disabled = false;
                stopRecordingButton.disabled = true;
                outputDiv.innerHTML = 'Recording stopped.';
            }
        }

        function processAudioBlob(blob) {
            const audioURL = URL.createObjectURL(blob);
            const audio = new Audio(audioURL);
            audio.controls = true;
            outputDiv.appendChild(audio);

            // You can use a speech recognition API to transcribe the audio and split it into sentences.
            // Note: This part requires additional work and integration with a speech recognition service.
            // Here's a basic example using the Web Speech API (not accurate for long recordings):
            const recognition = new webkitSpeechRecognition();
            recognition.lang = 'en-US';

            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                outputDiv.innerHTML += `<p>${transcript}</p>`;
            };

            recognition.onerror = (event) => {
                console.error('Speech recognition error:', event.error);
            };

            recognition.onend = () => {
                recognition.stop();
            };

            recognition.start();
            recognition.sendAudio(blob);
        }
    });
</script>
